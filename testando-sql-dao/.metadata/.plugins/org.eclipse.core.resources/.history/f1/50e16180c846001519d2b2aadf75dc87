package br.com.caelum.pm73.dao;

import static org.junit.Assert.*;

import java.util.Calendar;
import java.util.List;

import org.hibernate.Session;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import br.com.caelum.pm73.dominio.Leilao;
import br.com.caelum.pm73.dominio.Usuario;

public class LeilaoDaoTests {
    private Session session;
    private LeilaoDao leilaoDao;
    private UsuarioDao usuarioDao;

    @Before
    public void antes() {
        session = new CriadorDeSessao().getSession();
        leilaoDao = new LeilaoDao(session);
        usuarioDao = new UsuarioDao(session);

        // inicia transacao
        session.beginTransaction();
    }

    @After
    public void depois() {
        // faz o rollback
        session.getTransaction().rollback();
        session.close();
    }

    @Test
    public void deveContarLeiloesNaoEncerrados() {
        // criamos um usuario
        Usuario mauricio = 
                new Usuario("Mauricio Aniche", "mauricio@aniche.com.br");

        // criamos os dois leiloes
        Leilao ativo = 
                new Leilao("Geladeira", 1500.0, mauricio, false);
        Leilao encerrado = 
                new Leilao("XBox", 700.0, mauricio, false);
        encerrado.encerra();

        // persistimos todos no banco
        usuarioDao.salvar(mauricio);
        leilaoDao.salvar(ativo);
        leilaoDao.salvar(encerrado);

        // invocamos a acao que queremos testar
        // pedimos o total para o DAO
        long total = leilaoDao.total();

        assertEquals(1L, total);
    }
    
    @Test
    public void deveContarZeroParaLeiloesEncerrados() {
        // criamos um usuario
        Usuario mauricio = 
                new Usuario("Mauricio Aniche", "mauricio@aniche.com.br");

        // criamos os dois leiloes
        Leilao leilao1 = 
                new Leilao("Geladeira", 1500.0, mauricio, false);
        leilao1.encerra();
        Leilao leilao2 = 
                new Leilao("XBox", 700.0, mauricio, false);
        leilao2.encerra();

        // persistimos todos no banco
        usuarioDao.salvar(mauricio);
        leilaoDao.salvar(leilao1);
        leilaoDao.salvar(leilao2);

        // invocamos a acao que queremos testar
        // pedimos o total para o DAO
        long total = leilaoDao.total();

        assertEquals(0L, total);
    }
    
    @Test
    public void deveRetornarLeiloesNaoUsados() {
        // criamos um usuario
        Usuario mauricio = 
                new Usuario("Mauricio Aniche", "mauricio@aniche.com.br");

        // criamos os dois leiloes
        Leilao leilao1 = 
                new Leilao("Geladeira", 1500.0, mauricio, true);
        leilao1.encerra();
        Leilao leilao2 = 
                new Leilao("XBox", 700.0, mauricio, false);
        leilao2.encerra();
        
        Leilao leilao3 = 
                new Leilao("Microondas", 350.0, mauricio, false);
        leilao3.encerra();

        // persistimos todos no banco
        usuarioDao.salvar(mauricio);
        leilaoDao.salvar(leilao1);
        leilaoDao.salvar(leilao2);
        leilaoDao.salvar(leilao3);

        // invocamos a acao que queremos testar
        // pedimos o total para o DAO
        List<Leilao> leiloesNovos = leilaoDao.novos();

        assertEquals(2, leiloesNovos.size());
        assertEquals("XBox", leiloesNovos.get(0).getNome());
        assertEquals("Microondas", leiloesNovos.get(1).getNome());
    }
    
    @Test
    public void deveRetornarLeiloesCriadosExatamenteAumaSemana(){
        // criamos um usuario
        Usuario mauricio = 
                new Usuario("Mauricio Aniche", "mauricio@aniche.com.br");

        // criamos os dois leiloes
        Leilao leilao1 = 
                new Leilao("Geladeira", 1500.0, mauricio, true);
        leilao1.encerra();
        Calendar hoje = Calendar.getInstance();
        leilao1.setDataAbertura(hoje);
        Leilao leilao2 = 
                new Leilao("XBox", 700.0, mauricio, false);
        leilao2.encerra();
        leilao2.setDataAbertura(hoje);
        
        Leilao leilao3 = 
                new Leilao("Microondas", 350.0, mauricio, false);
        leilao3.encerra();
        Calendar semanaPassada = Calendar.getInstance();
        semanaPassada.add(Calendar.DAY_OF_MONTH, -7);
        leilao3.setDataAbertura(semanaPassada);

        // persistimos todos no banco
        usuarioDao.salvar(mauricio);
        leilaoDao.salvar(leilao1);
        leilaoDao.salvar(leilao2);
        leilaoDao.salvar(leilao3);

        // invocamos a acao que queremos testar
        // pedimos o total para o DAO
        List<Leilao> leiloesAntigos = leilaoDao.antigos();

        assertEquals(1, leiloesAntigos.size());
        assertEquals("Microondas", leiloesAntigos.get(0).getNome());
    }
    
    @Test
    public void deveTrazerSomenteLeiloesAntigosHaMaisDe7Dias() {
        Usuario mauricio = new Usuario("Mauricio Aniche",
                "mauricio@aniche.com.br");

        Leilao noLimite = 
                new Leilao("XBox", 700.0, mauricio, false);

        Calendar dataAntiga = Calendar.getInstance();
        dataAntiga.add(Calendar.DAY_OF_MONTH, -7);

        noLimite.setDataAbertura(dataAntiga);

        usuarioDao.salvar(mauricio);
        leilaoDao.salvar(noLimite);

        List<Leilao> antigos = leilaoDao.antigos();

        assertEquals(1, antigos.size());
    }

    @Test
    public void deveTrazerLeiloesNaoEncerradosNoPeriodo() {

        // criando as datas
        Calendar comecoDoIntervalo = Calendar.getInstance();
        comecoDoIntervalo.add(Calendar.DAY_OF_MONTH, -10);
        Calendar fimDoIntervalo = Calendar.getInstance();

        Usuario mauricio = new Usuario("Mauricio Aniche",
                "mauricio@aniche.com.br");

        // criando os leiloes, cada um com uma data
        Leilao leilao1 = new LeilaoBuilder().comNome("XBox").comValor(700.0).comDono(mauricio).diasAtras(2).constroi();
        Leilao leilao2 = new LeilaoBuilder().comNome("Geladeira").comValor(1700.0).comDono(mauricio).diasAtras(20).constroi();
        
        // persistindo os objetos no banco
        usuarioDao.salvar(mauricio);
        leilaoDao.salvar(leilao1);
        leilaoDao.salvar(leilao2);

        // invocando o metodo para testar
        List<Leilao> leiloes = 
                leilaoDao.porPeriodo(comecoDoIntervalo, fimDoIntervalo);

        // garantindo que a query funcionou
        assertEquals(1, leiloes.size());
        assertEquals("XBox", leiloes.get(0).getNome());
    }
    
    @Test
    public void naoDeveTrazerLeiloesEncerradosNoPeriodo() {

        // criando as datas
        Calendar comecoDoIntervalo = Calendar.getInstance();
        comecoDoIntervalo.add(Calendar.DAY_OF_MONTH, -10);
        Calendar fimDoIntervalo = Calendar.getInstance();
        Calendar dataDoLeilao1 = Calendar.getInstance();
        dataDoLeilao1.add(Calendar.DAY_OF_MONTH, -2);

        Usuario mauricio = new Usuario("Mauricio Aniche",
                "mauricio@aniche.com.br");

        // criando os leiloes, cada um com uma data
        Leilao leilao1 = 
                new Leilao("XBox", 700.0, mauricio, false);
        leilao1.setDataAbertura(dataDoLeilao1);
        leilao1.encerra();
        
        leilao1 = new LeilaoBuilder().comNome("XBox").comValor(700.0).comDono(mauricio).diasAtras(2).encerrado().constroi();

        // persistindo os objetos no banco
        usuarioDao.salvar(mauricio);
        leilaoDao.salvar(leilao1);

        // invocando o metodo para testar
        List<Leilao> leiloes = 
                leilaoDao.porPeriodo(comecoDoIntervalo, fimDoIntervalo);

        // garantindo que a query funcionou
        assertEquals(0, leiloes.size());
    }
}
